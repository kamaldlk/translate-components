{"version":3,"sources":["../src/getTranslations.js"],"names":["openTag","closeTag","file","output","languages","readFile","err","data","console","log","regexp","results","match","texts","getTexts","existsSync","translationsFile","JSON","parse","newKeysText","Object","keys","map","key","template","stringify","writeFile","openTagPosition","result","indexOf","closeTagPosition","text","substr","length","addLanguages","object","language"],"mappings":";;;;;;AAAA;;;;;;AAEA,IAAMA,UAAU,aAAhB;AACA,IAAMC,WAAW,cAAjB;;kBAEe,UAACC,IAAD,EAAOC,MAAP,EAAeC,SAAf,EAA6B;AAC1C,eAAGC,QAAH,CAAYH,IAAZ,EAAkB,MAAlB,EAA0B,UAACI,GAAD,EAAMC,IAAN,EAAe;AACvC,QAAID,GAAJ,EAASE,QAAQC,GAAR,CAAYH,GAAZ;AACT,QAAII,SAAS,kCAAb;AACA,QAAIC,UAAUJ,KAAKK,KAAL,CAAWF,MAAX,CAAd;AACA,QAAIG,QAAQC,SAASH,OAAT,EAAkBP,SAAlB,CAAZ;AACA,QAAI,aAAGW,UAAH,CAAcZ,MAAd,CAAJ,EAA2B;AACzB,mBAAGE,QAAH,CAAYF,MAAZ,EAAoB,MAApB,EAA4B,UAACG,GAAD,EAAMC,IAAN,EAAe;AACzC,YAAMS,mBAAmBC,KAAKC,KAAL,CAAWX,IAAX,CAAzB;AACA,YAAIY,cAAcC,OAAOC,IAAP,CAAYR,KAAZ,CAAlB;AACAM,oBAAYG,GAAZ,CAAgB,eAAO;AACrB,cAAI,CAACN,iBAAiBO,GAAjB,CAAL,EAA4B;AAC1BP,6BAAiBO,GAAjB,IAAwBV,MAAMU,GAAN,CAAxB;AACD;AACF,SAJD;AAKA,YAAMC,WAAWP,KAAKQ,SAAL,CAAeT,gBAAf,EAAiC,IAAjC,EAAuC,CAAvC,CAAjB;AACA,qBAAGU,SAAH,CAAavB,MAAb,EAAqBqB,QAArB,EAA+B,eAAO;AACpC,cAAIlB,GAAJ,EAASE,QAAQC,GAAR,CAAYH,GAAZ;AACTE,kBAAQC,GAAR,CAAY,6CAAZ;AACD,SAHD;AAID,OAbD;AAcD,KAfD,MAeO;AACL,UAAMe,WAAWP,KAAKQ,SAAL,CAAeZ,KAAf,EAAsB,IAAtB,EAA4B,CAA5B,CAAjB;AACA,mBAAGa,SAAH,CAAavB,MAAb,EAAqBqB,QAArB,EAA+B,eAAO;AACpC,YAAIlB,GAAJ,EAASE,QAAQC,GAAR,CAAYH,GAAZ;AACTE,gBAAQC,GAAR,CAAY,4BAAZ;AACD,OAHD;AAID;AACF,GA3BD;AA4BD,C;;AAED,SAASK,QAAT,CAAkBH,OAAlB,EAA2BP,SAA3B,EAAsC;AACpC,MAAIS,QAAQ,EAAZ;AACAF,UAAQW,GAAR,CAAY,kBAAU;AACpB,QAAIK,kBAAkBC,OAAOC,OAAP,CAAe7B,OAAf,CAAtB;AACA,QAAI8B,mBAAmBF,OAAOC,OAAP,CAAe5B,QAAf,CAAvB;AACA,QAAI8B,OAAOH,OAAOI,MAAP,CAAcL,kBAAkB3B,QAAQiC,MAAxC,EAAgDH,oBAAoB7B,SAASgC,MAAT,GAAkB,CAAtC,CAAhD,CAAX;AACApB,UAAMkB,IAAN,IAAcG,aAAaH,IAAb,EAAmB3B,SAAnB,CAAd;AACD,GALD;AAMA,SAAOS,KAAP;AACD;;AAED,SAASqB,YAAT,CAAsBH,IAAtB,EAA4B3B,SAA5B,EAAuC;AACrC,MAAIA,aAAaA,UAAU6B,MAA3B,EAAmC;AACjC,QAAIE,SAAS,EAAb;AACA/B,cAAUkB,GAAV,CAAc,oBAAY;AACxBa,aAAOC,QAAP,IAAmB,EAAnB;AACD,KAFD;AAGA,WAAOD,MAAP;AACD,GAND,MAMO;AACL,WAAO,EAAP;AACD;AACF","file":"getTranslations.js","sourcesContent":["import fs from 'fs'\n\nconst openTag = '<Translate>'\nconst closeTag = '</Translate>'\n\nexport default (file, output, languages) => {\n  fs.readFile(file, 'utf8', (err, data) => {\n    if (err) console.log(err)\n    let regexp = /<Translate>.[^<>]*<\\/Translate>/g\n    let results = data.match(regexp)\n    let texts = getTexts(results, languages)\n    if (fs.existsSync(output)) {\n      fs.readFile(output, 'utf8', (err, data) => {\n        const translationsFile = JSON.parse(data)\n        let newKeysText = Object.keys(texts)\n        newKeysText.map(key => {\n          if (!translationsFile[key]) {\n            translationsFile[key] = texts[key]\n          }\n        })\n        const template = JSON.stringify(translationsFile, null, 2)\n        fs.writeFile(output, template, err => {\n          if (err) console.log(err)\n          console.log('New translations added to translation file!')\n        })\n      })\n    } else {\n      const template = JSON.stringify(texts, null, 2)\n      fs.writeFile(output, template, err => {\n        if (err) console.log(err)\n        console.log('Translations file created!')\n      })\n    }\n  })\n}\n\nfunction getTexts(results, languages) {\n  let texts = {}\n  results.map(result => {\n    let openTagPosition = result.indexOf(openTag)\n    let closeTagPosition = result.indexOf(closeTag)\n    let text = result.substr(openTagPosition + openTag.length, closeTagPosition - (closeTag.length - 1))\n    texts[text] = addLanguages(text, languages)\n  })\n  return texts\n}\n\nfunction addLanguages(text, languages) {\n  if (languages && languages.length) {\n    let object = {}\n    languages.map(language => {\n      object[language] = \"\"\n    })\n    return object\n  } else {\n    return {}\n  }\n}\n"]}